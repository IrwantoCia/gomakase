// Package logger
package logger

import (
	"os"

	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
	"gopkg.in/natefinch/lumberjack.v2"
)

type Logger interface {
	Debug(msg string, fields ...any)
	Info(msg string, fields ...any)
	Warn(msg string, fields ...any)
	Error(msg string, fields ...any)
	Fatal(msg string, fields ...any)
	With(fields ...any) Logger
	Sync() error
}

type zapLogger struct {
	logger *zap.SugaredLogger
}

func NewLogger(level string) Logger {
	var logLevel zapcore.Level
	switch level {
	case "debug":
		logLevel = zapcore.DebugLevel
	case "info":
		logLevel = zapcore.InfoLevel
	case "warn":
		logLevel = zapcore.WarnLevel
	case "error":
		logLevel = zapcore.ErrorLevel
	default:
		logLevel = zapcore.InfoLevel
	}

	// log file folder will be in the root of the project, despite of the current working directory
	logFileFolder := "logs"
	os.MkdirAll(logFileFolder, os.ModePerm)
	logFilePath := logFileFolder + "/app.log"

	lumberjackLogger := &lumberjack.Logger{
		Filename:   logFilePath,
		MaxSize:    100,  // Max size in MB before file is rotated
		MaxBackups: 3,    // Max number of old log files to keep
		MaxAge:     28,   // Max number of days to retain old log files
		Compress:   true, // Whether to compress old log files
	}
	fileSyncer := zapcore.AddSync(lumberjackLogger)

	encoderConfig := zap.NewProductionEncoderConfig()
	// You might want to make the timestamp readable for file logs
	encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder
	encoder := zapcore.NewJSONEncoder(encoderConfig)

	// Combine console output (stdout) and file output (lumberjack)
	consoleEncoder := zapcore.NewConsoleEncoder(zap.NewDevelopmentEncoderConfig())

	// Create a new core for writing to STDOUT (console) and file
	core := zapcore.NewTee(
		zapcore.NewCore(consoleEncoder, zapcore.AddSync(os.Stdout), logLevel), // Console output
		zapcore.NewCore(encoder, fileSyncer, logLevel),                        // File output (with rotation)
	)

	// --- 3. Build the logger from the custom core ---
	logger := zap.New(core, zap.AddCaller(), zap.ErrorOutput(zapcore.AddSync(os.Stderr)))

	return &zapLogger{
		logger: logger.Sugar(),
	}
}

func (l *zapLogger) Debug(msg string, fields ...any) {
	l.logger.Debugw(msg, fields...)
}

func (l *zapLogger) Info(msg string, fields ...any) {
	l.logger.Infow(msg, fields...)
}

func (l *zapLogger) Warn(msg string, fields ...any) {
	l.logger.Warnw(msg, fields...)
}

func (l *zapLogger) Error(msg string, fields ...any) {
	l.logger.Errorw(msg, fields...)
}

func (l *zapLogger) Fatal(msg string, fields ...any) {
	l.logger.Fatalw(msg, fields...)
}

func (l *zapLogger) With(fields ...any) Logger {
	return &zapLogger{
		logger: l.logger.With(fields...),
	}
}

func (l *zapLogger) Sync() error {
	return l.logger.Sync()
}

