package infrastructure

import (
	"{{.ProjectName}}/internal/shared/logger"
	"{{.ProjectName}}/internal/user_context/domain"

	"errors"

	"github.com/google/uuid"
	"gorm.io/gorm"
)

type UserRepositoryImpl struct {
	db     *gorm.DB
	logger logger.Logger
}

func NewUserRepositoryImpl(db *gorm.DB, logger logger.Logger) *UserRepositoryImpl {
	return &UserRepositoryImpl{db: db, logger: logger}
}

func (r *UserRepositoryImpl) Save(user *domain.User) error {
	if user.UserID == "" {
		user.UserID = uuid.New().String()
	}

	schema := &UserSchema{
		UserID:   user.UserID,
		Email:    user.Email,
		Password: user.Password,
		IsActive: user.IsActive,
	}

	return r.db.Save(schema).Error
}

func (r *UserRepositoryImpl) FindByID(id string) (*domain.User, error) {
	var user UserSchema
	if err := r.db.Where("user_id = ?", id).First(&user).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, nil
		}
		return nil, err
	}

	return &domain.User{
		UserID:   user.UserID,
		Email:    user.Email,
		Password: user.Password,
		IsActive: user.IsActive,
	}, nil
}

func (r *UserRepositoryImpl) FindByEmail(email string) (*domain.User, error) {
	var user UserSchema
	if err := r.db.Where("email = ?", email).First(&user).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, nil
		}
		return nil, err
	}

	return &domain.User{
		UserID:   user.UserID,
		Email:    user.Email,
		Password: user.Password,
		IsActive: user.IsActive,
	}, nil
}
