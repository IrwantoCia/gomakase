package config

import (
	"fmt"
	"os"
	"time"

	"github.com/joho/godotenv"
	"github.com/spf13/viper"
)

type AppConfig struct {
	LogLevel  string          `mapstructure:"LOG_LEVEL"`
	Database  DatabaseConfig  `mapstructure:"DATABASE"`
	Server    ServerConfig    `mapstructure:"SERVER"`
	JWT       JWTConfig       `mapstructure:"JWT"`
	AppCookie AppCookieConfig `mapstructure:"APP_COOKIE"`
	Doku      DokuConfig      `mapstructure:"DOKU"`
}

type AppCookieConfig struct {
	CookieSecret string `mapstructure:"COOKIE_SECRET"`
}

type DokuConfig struct {
	URL       string `mapstructure:"URL"`
	ClientID  string `mapstructure:"CLIENT_ID"`
	SecretKey string `mapstructure:"SECRET_KEY"`
}

type DatabaseConfig struct {
	Host     string `mapstructure:"DB_HOST"`
	Port     int    `mapstructure:"DB_PORT"`
	User     string `mapstructure:"DB_USER"`
	Password string `mapstructure:"DB_PASSWORD"`
	Name     string `mapstructure:"DB_NAME"`
	SSLMode  string `mapstructure:"DB_SSLMODE"`
	Driver   string `mapstructure:"DB_DRIVER"`
}

func (c DatabaseConfig) DSN() string {
	return fmt.Sprintf(
		"host=%s port=%d user=%s password=%s dbname=%s sslmode=%s",
		c.Host,
		c.Port,
		c.User,
		c.Password,
		c.Name,
		c.SSLMode,
	)
}

type ServerConfig struct {
	Port int `mapstructure:"SERVER_PORT"`
}

type JWTConfig struct {
	Secret         string `mapstructure:"JWT_SECRET"`
	AccessTokenExp time.Duration
}

func Load(path string) (*AppConfig, error) {
	if path != "" {
		// check if file exists
		if _, err := os.Stat(path); os.IsNotExist(err) {
			return nil, fmt.Errorf("file %s does not exist", path)
		}
		godotenv.Load(path)
	} else {
		godotenv.Load()
	}

	viper.SetDefault("LOG_LEVEL", "info")

	viper.SetDefault("SERVER.SERVER_PORT", 8080)

	viper.SetDefault("DATABASE.DB_HOST", "localhost")
	viper.SetDefault("DATABASE.DB_PORT", 5432)
	viper.SetDefault("DATABASE.DB_USER", "postgres")
	viper.SetDefault("DATABASE.DB_PASSWORD", "password")
	viper.SetDefault("DATABASE.DB_NAME", "{{.ProjectName}}")
	viper.SetDefault("DATABASE.DB_SSLMODE", "disable")
	viper.SetDefault("DATABASE.DB_DRIVER", "sqlite")

	viper.SetDefault("JWT.JWT_SECRET", "your-jwt-secret")

	viper.SetDefault("APP_COOKIE.COOKIE_SECRET", "your-cookie-secret")

	viper.SetDefault("DOKU.URL", "https://api-sandbox.doku.com/checkout/v1/payment")
	viper.SetDefault("DOKU.CLIENT_ID", "your-client-id")
	viper.SetDefault("DOKU.SECRET_KEY", "your-secret-key")

	viper.AutomaticEnv()

	var config AppConfig
	if err := viper.Unmarshal(&config); err != nil {
		return nil, fmt.Errorf("failed to unmarshal config: %w", err)
	}
	config.JWT.AccessTokenExp = time.Hour * 24

	return &config, nil
}
