package domain

import (
	"errors"
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	PaymentStatusPending   = "pending"
	PaymentStatusSuccess   = "success"
	PaymentStatusFailed    = "failed"
	PaymentStatusExpired   = "expired"
	PaymentStatusCancelled = "cancelled"
)

type RawPaymentRecord struct {
	RawPaymentRecordID string
	Content            string
	CreatedAt          time.Time
}

type Payment struct {
	PaymentID            string
	OrderID              string
	InvoiceNumber        string
	Status               string
	Amount               float64
	Currency             string
	GatewayTransactionID string
	PaymentMethod        string
	RawPaymentRecords    []*RawPaymentRecord
	CreatedAt            time.Time
}

func NewPayment(createPaymentRequest CreatePaymentRequestDTO) (*Payment, error) {
	payment := &Payment{
		PaymentID:            createPaymentRequest.PaymentID,
		OrderID:              createPaymentRequest.OrderID,
		InvoiceNumber:        createPaymentRequest.InvoiceNumber,
		Status:               createPaymentRequest.Status,
		Amount:               createPaymentRequest.Amount,
		Currency:             createPaymentRequest.Currency,
		GatewayTransactionID: createPaymentRequest.GatewayTransactionID,
		PaymentMethod:        createPaymentRequest.PaymentMethod,
		RawPaymentRecords:    createPaymentRequest.RawPaymentRecords,
		CreatedAt:            createPaymentRequest.CreatedAt,
	}

	if payment.OrderID == "" {
		return nil, errors.New("order id is required")
	}

	if payment.Amount <= 0 {
		return nil, errors.New("amount must be greater than 0")
	}

	if payment.Currency == "" {
		return nil, errors.New("currency must be set")
	}

	if payment.PaymentMethod == "" {
		return nil, errors.New("payment method must be set")
	}

	if payment.Status == "" {
		return nil, errors.New("status must be set")
	}

	if payment.PaymentID == "" {
		return nil, errors.New("payment id must be set")
	}

	if payment.InvoiceNumber == "" {
		return nil, errors.New("invoice number is required")
	}

	return payment, nil
}

func (p *Payment) UpdateStatus(status string) {
	p.Status = status
}

func (p *Payment) UpdatePaymentMethod(paymentMethod string) {
	p.PaymentMethod = paymentMethod
}

func (p *Payment) AddRawPaymentRecord(paymentID string, rawPaymentContent string) {
	rawPaymentRecord := &RawPaymentRecord{
		RawPaymentRecordID: uuid.New().String(),
		Content:            rawPaymentContent,
		CreatedAt:          time.Now(),
	}
	p.RawPaymentRecords = append(p.RawPaymentRecords, rawPaymentRecord)
}

func SetInvoiceNumber(orderID string, paymentID string) (string, error) {
	// invoice number format INV-YYYYMMDD-XXXXXXXX
	// XXXXXXXX is the combination of 4 last digits of order id & payment id
	timeStamp := time.Now().Format("20060102")
	uniqueIdentifier := fmt.Sprintf("%s-%s", orderID, paymentID)
	invoiceNumber := fmt.Sprintf("INV-%s-%s", timeStamp, uniqueIdentifier)
	return invoiceNumber, nil
}
